Q-1)
----
Create an interface AdvancedArithmetic

which contain method  :

Method name :divisorSum
return Type    :int
Argument type:int
Access Modifier :public
non-access modifier :abstract

 
Then write a class called MyCalculator which implements the interface AdvancedArithmetic. 

divisorSum function just takes an integer as input and return the sum of all its divisors.

For example divisors of 6 are 1,2,3 and 6, so divisorSum should return 12. 

Sample Input 
6 
Sample Output 
12 
Explanation 
Divisors of 6 are 1,2,3 and 6. 1+2+3+6=12. 
A class Testing is given to you with a main method. Use this class to test your solution's classes and meth
ods.


Example :
-----------
Test Case 1 : 
--------------
Sample Input: 6

Expected Output:

Sum of divisors: 12
Explanation: Divisors of 6 are 1, 2, 3, and 6. 1 + 2 + 3 + 6 = 12.

Test Case 2 : 
--------------
Sample Input: -6

Expected Output:
Error: Input must be a positive integer.


Test Case 3:
--------------
Sample Input: 0

Expected Output:
Error: Input must be a positive integer.

Test Case 4:
--------------
Input: abc

Expected Output:

Error: Invalid input. Please enter a valid positive integer.

Test Case 5: 
--------------
Input: 28

Expected Output:
Sum of divisors: 56
Explanation: Divisors of 28 are 1, 2, 4, 7, 14, and 28. 1 + 2 + 4 + 7 + 14 + 28 = 56.

ans:
package com.test1;

public interface AdvancedArithmetic {
	
	public abstract int divisorSum(int divisorSum );

}
package com.test1;

public class MyCalculator implements AdvancedArithmetic {

	@Override
	public int divisorSum(int divisorSum) {
		int sum=0;
		if(divisorSum<=0){
			System.err.println("Input must be a positive integer.");
			System.exit(0);
		}
		for(int i =1;i<=divisorSum/2;i++) {
		 if(divisorSum%i==0)
			sum+=i;
		}		
		return sum+divisorSum;
	}

}


package com.test1;

public class Testing {

	public static void main(String[] args) {
		MyCalculator c1 = new MyCalculator();
		int divisorSum = c1.divisorSum(6);
		System.out.println("Sum of divisors: "+divisorSum);		

	}

}
==================================================================================================================

Q-2)
-----
Employee Management System:

Employee Interface :

Create an interface named Employee with two methods: 

Method Name   :calculateSalary() 
Return Type      :double
Acess Modifier  :public 

Method Name  : generatePayroll()
Return Type     :void
Acess Modifier :public 

The calculateSalary() method should compute the salary for the employee.
The generatePayroll() method should generate the payroll information for the employee.

FullTimeEmployee Class :

Implement a class named FullTimeEmployee that implements the Employee interface.

Include Attributes :
employeeId     	:(int)
employeeName   	:(String)
monthlySalary 	:(double) 
benefits 			:(double)

Acess modifier :private(for all the varriable )

Provide a constructor that initializes the employee details.

Implement the calculateSalary() method to calculate the salary for a full-time employee, including benefits.

Implement the generatePayroll() method to print the payroll information for a full-time employee.

Testing :

Take a main clas  Employee Management System.
Create instances of  FullTimeEmployee.
Call the calculateSalary() and generatePayroll() methods to ensure correct calculations and information generation.

Test Case 1 : 
--------------
for Negative Salary
Sample Input:
if user eneterd negative salary

Expected Output :
Error: Monthly salary cannot be negative.


Test Case 2 :
--------------
 Empty Employee Name
Input:

if employee is passed by the user is ""(empty)

Expected Output:

Error: Employee name cannot be empty.

Test Case 3 :
--------------
Sample Input :
if all the information is valid input

Expected Output :
Print all the detail information.

ans:
package com.test2;

public interface Employee {
	double calculateSalary();
	void generatePayroll();

}


package com.test2;

public class FullTimeEmployee implements Employee {
	private int employeeId;
	private String employeeName;
	private double monthlySalary;
	private double benefits;

	public FullTimeEmployee(int employeeId, String employeeName, double monthlySalary, double benefits) {
		super();
		 if (monthlySalary < 0) {
              System.err.println("Monthly salary cannot be negative.");
              System.exit(0);
	        }
	        if (employeeName == null || employeeName.trim().isEmpty()) {
	        	System.err.println("Monthly salary cannot be negative.");
	            System.exit(0);

	        }
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.monthlySalary = monthlySalary;
		this.benefits = benefits;
	}

	@Override
	public double calculateSalary() {
        return monthlySalary + benefits;
	}

	@Override
	public void generatePayroll() {
	     System.out.println("Employee ID: " + employeeId);
	        System.out.println("Employee Name: " + employeeName);
	        System.out.println("Monthly Salary: " + monthlySalary);
	        System.out.println("Benefits: " + benefits);
	        System.out.println("Total Salary: " + calculateSalary());
	}

}


package com.test2;

public class Main {

    public static void main(String[] args) {
    	FullTimeEmployee f1 = new FullTimeEmployee(101, "John Doe", 5000, 1000);
    	f1.calculateSalary();
    	f1.generatePayroll();

	}

}


========================================================================================================================

Question -3
--------------
Social Media System: 

Post Interface :

Create an interface named Post with two methods.

Method Name   :publish() 
Return Type      :void
Acess Modifier  :public 

Method Name  : like()
Return Type     :void
Acess Modifier :public 


The publish() method should print a message indicating that the post has been published.
The like() method should increment a counter for the number of likes and print a message indicating that the post has been liked.

TextPost Class :

Implement a class named TextPost that implements the Post interface.

Include Attributes :

 textContent 	  :(String) 
 likes                 : (int)

take a  constructor, and  initialize the likes to 0.

Provide an implementation for the publish() method to print the text content of the post.
Provide an implementation for the like() method to increment the likes counter and print the updated number of likes.

Include an additional method, e.g., getTextContent(), to retrieve the text content of the post.

Testing :

Write a test program that demonstrates the functionality of your social media system.
Create instances of TextPost. 
Call the like and publish method and show that the number of likes are increasing.

Test Case -1: 
---------------
Empty Text Content
Sample Input: textContent =""

Expected Output :
Error: Text content cannot be empty.

Test Case -2 :

Sample Input: textContent ="Hello, world!"

Expected Output :
Post Liked! Total likes: 1
Post Liked! Total likes: 2

Post 1: Hello, world! | Likes: 2

ans:
package com.test3;

public interface Post {
	void publish();
	void like();

}


package com.test3;

public class TextPost implements Post{
    private String textContent;
	private int likes;

	public TextPost(String textContent) {
		super();
		if (textContent == null || textContent.trim().isEmpty()) {
			System.err.println("Error: Text content cannot be empty.");
			System.exit(0);
		}
		this.textContent = textContent;
		this.likes = 0;
	}

	@Override
	public void publish() {
		System.out.println("Post Published: " + textContent);		
	}

	@Override
	public void like() {
		likes++;
        System.out.println("Post Liked! Total likes: " + likes);		
	}
	
	  public int getTextContent() {
	        return likes;
	    }
    public int getLikes() {
	        return likes;
	    }

}


package com.test3;

public class Testing {

	public static void main(String[] args) {
		TextPost t1 = new TextPost("textContent");
		t1.publish();
		t1.like();
		System.out.println();
		
		TextPost t2 = new TextPost("Hello, world!");
		t2.publish();
		t2.like();
		t2.like();
		System.out.println();
		
		System.out.println("Post 1: " + t2.getTextContent() + " | Likes: " + t2.getLikes());

	}

}

