Program: 1
-----------
Define an abstract class 'Shape' with following specifications
Methods:
1. Name: getArea
   ReturnType: double
   Modifier: abstract
2. Name: printDetails
    ReturnType: double
    Modifier: abstract
Define sub-classes of Shape as Rectangle, Circle and Triangle that overrides the methods of shape
Rectangle class
Fields:
	1. length - double
	2. breadth - double
Constructors:
	A parametrized constructor the accepts and initializes length and breadth.
Circle class
Fields:
	1. radius - double
Constructors:
	A parametrized constructor the accepts and initializes radius.
Triangle class
Fields:
	1. base - double
	2. height - double
Constructors:
	A parametrized constructor the accepts and initializes base and height.
All the sub-classes of Shape should override the methods of the shape.
getArea() should return the area of the respective shape.
printDetails() should print the shape details as below
	input:  Rectangle(30.3, 45.4)
	output:
		Type = Rectangle
		Length = 30.3
		Breadth = 45.4
		Area = 1375.62
	input: Circle(23.2)
	output:
		Type = Circle
		Radius = 23.2
		Area = 1690.0736
	input: Triangle(146.2, 40.0);
	output:
		Type = Triangle
		Base = 146.2
		Height = 40.0
		Area = 2924.0
Given a class Testing with main method to test your code.

ans:
package com.test3;

public abstract class Shape {
      public abstract double getArea();
      public abstract double printDetails();
}


package com.test3;

public class Rectangle extends Shape{
	public double length;
	public double breadth;
	
	public Rectangle(double length, double breadth) {
		super();
		this.length = length;
		this.breadth = breadth;
	}

	@Override
	public double getArea() {
		double result = this.length*this.breadth;
		return result;
	}

	@Override
	public double printDetails() {
		System.out.println("Area Of Rectangle: "+getArea());
		return 0;
	}

}


package com.test3;

public class Circle extends Shape {
	public double radius;
	
	public Circle(double radius) {
		super();
		this.radius = radius;
	}

	@Override
	public double getArea() {
		 final double pi = 3.14;
		double result = pi * this.radius*this.radius;
		return result;
	}

	@Override
	public double printDetails() {
		System.out.println("Area Of Circle: "+getArea());
		return 0;
	}

}


package com.test3;

public class Triangle extends Shape {
	public double base;
	public double height;
	

	public Triangle(double base, double height) {
		super();
		this.base = base;
		this.height = height;
	}

	@Override
	public double getArea() {
		double result = (this.base*this.height)/2;
		return result;
	}

	@Override
	public double printDetails() {
		System.out.println("Area Of Triangle: "+getArea());
		return 0;
	}

}


package com.test3;

public class Main {

	public static void main(String[] args) {
        Rectangle r1 = new Rectangle(30.3, 45.4);
        r1.printDetails();
        System.out.println();
        Circle c1 = new Circle(23.2);
        c1.printDetails();
        System.out.println();
        Triangle t1 = new Triangle(146.2, 40.0);
        t1.printDetails();	}

}
====================================================================================================================
-------------------------------------------------------------------------
 Program 2:
----------
We have a class named as Car and it is abstract class we need to implement abstract method in 
sub class named as Test
For abstract class Car 
Instance Variables:
brand : String default
model : String default
mileage : int default
top_speed : int default
yearOfManufacturing : int default
Methods:
No Argument Constructor
carBrand() : String : It return brand of the car by using brand variable so initialize brand variable and return it.

carModel() : String : It return model of the car by using model variable so initialize model variable and return it.

carMileage() : int : It return mileage of the car by using mileage variable so initialize mileage variable and return it 

carTopSpeed() : int : It return topspeed of the car by using top_speed variable so initialize top-speed variable and return it 

carYear() : int : It return year of manufacturing of the car by using yearOfManufacturing 

variable so initialize yearOfManufacturing variable and return it
display() : void : abstract : This is abstract method to implement in 

sub class
Create a sub class of Car called as Test
Methods:
@Override
display(): void : It print all the details of parent class
This class having main method to test the solutions of parent class

ans:

package com.test4;

public abstract class Car {
	 protected String brand = "Default Brand";
	    protected String model = "Default Model";
	    protected int mileage = 0;
	    protected int top_speed = 0;
	    protected int yearOfManufacturing = 0;

	    public Car() {}

	 
	    public String carBrand() {
	        brand = "Toyota"; 
	        return brand;
	    }

	  
	    public String carModel() {
	        model = "Corolla"; 
	        return model;
	    }

	
	    public int carMileage() {
	        mileage = 30; 
	        return mileage;
	    }

	    
	    public int carTopSpeed() {
	        top_speed = 180; 
	        return top_speed;
	    }

	
	    public int carYear() {
	        yearOfManufacturing = 2022; 
	        return yearOfManufacturing;
	    }

	    public abstract void display();


}


package com.test4;

public class Test extends Car {

	@Override
	public void display() {
	    System.out.println("Car Brand: " + carBrand());
        System.out.println("Car Model: " + carModel());
        System.out.println("Car Mileage: " + carMileage() + " km/l");
        System.out.println("Car Top Speed: " + carTopSpeed() + " km/h");
        System.out.println("Year of Manufacturing: " + carYear());
		
	}

}


package com.test4;

public class Main {
	public static void main(String[] args) {
		 Test car = new Test();
	        car.display();
	}

}

=====================================================================================================================
------------------------------------------------------------------------
Program 03 :
------------
Nutrition in food can be broken down into proteins, fats, and carbohydrates. Implement the following classes about food and nutrition to complete this challenge:

1. abstract class Food with the following properties:

double proteins
double fats
double carbs
double tastyScore
void getMacroNutrients [Abstract Method]

2. class Egg which extends class Food and has the following properties:

Constructor to initialize the attributes (proteins, fats, and carbs) in the same order.
int tastyScore = 7
String type = "non-vegetarian"
void getMacroNutrients => prints("An egg has [this.proteins] gms of protein, [this.fats] gms of fats and [this.carbs] gms of carbohydrates.")

3. class Bread which extends class Food and has the following properties:

Constructor to initialize the attributes (proteins, fats, and carbs) in the same order.
int tastyScore = 8
String type = "vegetarian"
void getMacroNutrients => prints(" A slice of bread has [this.proteins] gms of protein, [this.fats] gms of fats and [this.carbs] gms of carbohydrates.")
 

Create an ELC class Testing
The first line contains an integer, n, the number of food items.

Every food item takes input in the next 4 lines where the first line is the name of the food and the next three lines are method calls (getType, getTaste, and getMacros) 

Input :-
1
Bread
getType
getMacros
getTaste
Output :-

Bread is vegetarian
A slice of bread has 4.0 gms of protein, 1.1 gms of fats and 13.8 gms of carbohydrates.
Taste: 8

ans:
package com.test5;

public abstract class Food {
	protected double proteins;
	protected double fats;
	protected double carbs;
	protected int tastyScore;
	
	public Food(double proteins, double fats, double carbs) {
		super();
		this.proteins = proteins;
		this.fats = fats;
		this.carbs = carbs;
	}

	public int getTaste() {
	        return tastyScore;
	    }
	
	public abstract void getMacroNutrients();

	public abstract String getType();

}


package com.test5;

public class Egg extends Food{
	 private String type = "non-vegetarian";
	

	public Egg(double proteins, double fats, double carbs) {
		super(proteins, fats, carbs);
		this.tastyScore = 7;
	}

	@Override
	public void getMacroNutrients() {
		 System.out.println("An egg has " + this.proteins + " gms of protein, " +          this.fats + " gms of fats and " + this.carbs + " gms of carbohydrates.");		
	}

	@Override
	public String getType() {	
		return type;
	}

}


package com.test5;

public class Bread extends Food{
	 private String type = "vegetarian";

	public Bread(double proteins, double fats, double carbs) {
		super(proteins, fats, carbs);
		this.tastyScore = 8;
	}

	@Override
	public void getMacroNutrients() {
		 System.out.println("A slice of bread has " + this.proteins + " gms of protein, " + this.fats + " gms of fats and " + this.carbs + " gms of carbohydrates.");
	}

	@Override
	public String getType() {
		return type;
	}

}


package com.test5;

import java.util.Scanner;

public class Testing {

	public static void main(String[] args) {
		   Scanner scanner = new Scanner(System.in);
            System.out.println("Enter Food Item And Food Method: ");
	        int n = Integer.parseInt(scanner.nextLine()); 

	        for (int i = 0; i < n; i++) {
	            String foodName = scanner.nextLine(); 
	            Food food;

	           
	            if (foodName.equalsIgnoreCase("Egg")) {
	                food = new Egg(6.0, 5.0, 0.5); 
	            } else if (foodName.equalsIgnoreCase("Bread")) {
	                food = new Bread(4.0, 1.1, 13.8); 
	            } else {
	                System.out.println("Unknown food item.");
	                continue;
	            }

	            
	            String method1 = scanner.nextLine();
	            if (method1.equalsIgnoreCase("getType")) {
	                System.out.println(foodName + " is " + food.getType());
	            }

	            String method2 = scanner.nextLine();
	            if (method2.equalsIgnoreCase("getMacros")) {
	                food.getMacroNutrients();
	            }

	            String method3 = scanner.nextLine();
	            if (method3.equalsIgnoreCase("getTaste")) {
	                System.out.println("Taste: " + food.getTaste());
	            }
	        }

	        scanner.close();

	}

}
