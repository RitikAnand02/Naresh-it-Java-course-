Ques - 1
--------------
Character Frequency Calculation Using Map implemented classes:
Write a Java program to calculate the frequency of each character in a given string. You are required to use a HashMap to store each character as a key and its frequency as the corresponding value. Spaces and punctuation marks should be ignored in the frequency calculation.

Create a Java class CharacterFrequency(ELC) with a main method.
Inside the main method, initialize a String variable with a sample string.
Use a Map<Character, Integer> to store character frequencies.
Iterate through each character in the string:
Ignore spaces and non-alphanumeric characters using Character.isLetterOrDigit().
Update the frequency in the HashMap.

Constraints:
Ensure that the program handles edge cases such as:
An empty string.
Strings with only spaces or punctuation marks.
Strings with mixed case characters.

Test Case 1:
Input: "Hello, World!"
Expected Output:
Character frequencies in the string 'Hello, World!':
'H' occurs 1 times
'e' occurs 1 times
'l' occurs 3 times
'o' occurs 2 times
'w' occurs 1 times
'r' occurs 1 times
'd' occurs 1 times

Test Case 2:
Input: "" (empty string)
Expected Output: (No output as there are no characters)

Test Case 3:
Input: "Java Programming"
Expected Output:
Character frequencies in the string 'Java Programming':
'j' occurs 1 times
'a' occurs 3 times
'v' occurs 1 times
'p' occurs 1 times
'r' occurs 2 times
'o' occurs 2 times
'g' occurs 2 times
'm' occurs 2 times
'i' occurs 1 times
'n' occurs 2 times

Test Case 4:
Input: " !@#$% "
Expected Output: (No output as there are no alphanumeric characters)

Test Case 5:
Input: "AAAaaa"
Expected Output:
Character frequencies in the string 'AAAaaa':
'a' occurs 3 times.

Ques - 2
------------
Custom Filterable HashMap Implementation.
Implement a custom HashMap in Java, FilterableHashMap, that supports filtering entries based on specified criteria for keys and values. The FilterableHashMap should include methods to add entries (put) and retrieve entries (getFiltered) with custom filtering rules.
Custom FilterableHashMap Class:

Create a Java BLC class FilterableHashMap<K,V> that extends HashMap<K, V>, where K represents the key type and V represents the value type.

methods :
Override the put method to add entries to the map only if they meet specific criteria for keys and values.
Only add entries if the key is of type Integer and the value is of type String with a length of 10 characters or less.
Print a message indicating if an entry is rejected due to failing the criteria.


Implement a custom method getFiltered to retrieve values from the map based on specified key filtering criteria.
method name : getFiltered
modifiers : public 
parameter : K key
return type : V 
Retrieve values from the map only if the key is of type Integer.
Print a message if an invalid key type is used.

Create a ELC class Tester :
In main method : 
Create an instance of FilterableHashMap<Integer, String>
Call put method by providing key and value.
Retrieve the values by calling getFiltered method by passing key.
Display the map.

Test Cases:

Test Case 1:
Input: Add entries {1=One, 2=Two, 3=Three, 4=Fourteen}.
Expected Output: Print map contents {1=One, 2=Two, 3=Three} after filtering out 4=Fourteen.

Test Case 2:
Input: Retrieve value for key 2.
Expected Output: Print Two as the value associated with key 2.

Test Case 3:
Input: Retrieve value for key "abc".
Expected Output: Print Invalid key type: abc, null indicating an invalid key type.

Extra Case:
Input: Attempt to add an entry with key null or non-Integer type.
Expected Output: Entry is rejected with appropriate error message

Batch_38_Assignment.txt
Displaying Batch_38_Assignment.txt.
Batch 38
Java Batch 38 (12th September 2024)
Upcoming
Woohoo, no work due soon!
